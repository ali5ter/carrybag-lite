#!/usr/bin/env bash

# Completion

# @ref https://kubernetes.io/docs/tasks/tools/install-kubectl/#optional-kubectl-configurations
type kubectl >/dev/null 2>&1 || {
    brew install kubectl
}
# shellcheck disable=SC1090
source <(kubectl completion bash)
[[ -f /usr/local/etc/bash_completion.d/kubectl ]] || kubectl completion bash >/usr/local/etc/bash_completion.d/kubectl
alias k=kubectl && complete -o default -F __start_kubectl k

type minikube >/dev/null 2>&1 || {
    brew install minikube
}
# shellcheck disable=SC1090
source <(minikube completion bash)
[[ -f /usr/local/etc/bash_completion.d/minikube ]] || minikube completion bash >/usr/local/etc/bash_completion.d/minikube

[ -f ~/.velero_completion.sh ] || curl -s -o ~/.velero_completion.sh https://raw.githubusercontent.com/ali5ter/cli_taxo/master/exp4/results/velero_completion.sh
# shellcheck disable=SC1090
source ~/.velero_completion.sh

# shellcheck disable=SC1090
source <(tanzu completion bash)
[[ -f /usr/local/etc/bash_completion.d/tanzu ]] || tanzu completion bash >/usr/local/etc/bash_completion.d/tanzu
alias t=tanzu && complete -o default -F __start_tanzu t

# @ref https://docs.vmware.com/en/Tanzu-Application-Platform/1.1/tap/GUID-install-general.html#tanzu-cli-clean-install
export TANZU_CLI_NO_INIT=true

tanzu_update() {
    tanzu plugin sync 
}
LAST_TANZU_UPDATE="$HOME/.last_tanzu_update"
[ -f "$LAST_TANZU_UPDATE" ] || echo "00" > "$LAST_TANZU_UPDATE"
if [ "$CDATE" != "$(head -n 1 "$LAST_TANZU_UPDATE")" ]; then
    echo "$CDATE" > "$LAST_TANZU_UPDATE"
    # shellcheck disable=SC2154
    echo -e "Checking Tanzu CLI..."
    tanzu_update
fi

# shellcheck disable=SC1090
# source <(tmc completion bash)
# [[ -f /usr/local/etc/bash_completion.d/tmc ]] || tmc completion bash >/usr/local/etc/bash_completion.d/tmc

# Prompt

[ -f ~/.config/starship.toml ] || {
    mkdir -p ~/.config && touch ~/.config/starship.toml
    cat > ~/.config/starship.toml <<'END_OF_STARSHIP_CONFIG'
format = "${custom.tanzu}$all"

command_timeout = 10000

[kubernetes]
disabled = false

[custom.tanzu]
description = "Display the current tanzu CLI context"
command = ". /Users/bowena/Documents/Projects/Work/vmware_scripts/tanzu/tanzu_prompt.sh; tanzu_prompt"
when= "command -v tanzu 1>/dev/null 2>&1"
disabled = false
END_OF_STARSHIP_CONFIG
}

# shellcheck disable=SC1091
source "$HOME/Documents/Projects/Work/vmware_scripts/tanzu/tanzu_prompt.sh"

# Fonts

# @ref https://clarity.design/get-started/design/
# shellcheck disable=SC2012
[ "$(ls -1qA ~/Library/Fonts/ClarityCity* 2>/dev/null | wc -l)" -eq "0" ] && {
    git clone git@github.com:vmware/clarity-city.git
    cp clarity-city/TrueType/ClarityCity* ~/Library/Fonts/
    rm -fR clarity-city
}

# shellcheck disable=SC2012
[ "$(ls -1qA ~/Library/Fonts/Consolas* 2>/dev/null | wc -l)" -eq "0"  ] && {
    echo "✋ Download and install the Consolas font from https://fontsgeek.com/fonts/Consolas-Regular"
}

# GCloud CLI
# shellcheck disable=SC1091
if [ -f '/Users/bowena/google-cloud-sdk/path.bash.inc' ]; then . '/Users/bowena/google-cloud-sdk/path.bash.inc'; fi
# shellcheck disable=SC1091
if [ -f '/Users/bowena/google-cloud-sdk/completion.bash.inc' ]; then . '/Users/bowena/google-cloud-sdk/completion.bash.inc'; fi

# shepherd config
# @ref https://via.vmw.com/TKP-CreateMgmtCluster
type sheepctl >/dev/null 2>&1 || {
    echo "✋ Install shepherd"
    brew tap vmware/internal git@gitlab.eng.vmware.com:homebrew/internal.git && \
        brew install shepherd
}
type sheepctl >/dev/null 2>&1 && {
    [ -z "$SHEPERD_LOCAL_NAMESPACE" ] && export SHEPHERD_LOCK_NAMESPACE=tmc-crow
    [ -z "$SHEPHERD_LOCK_STORE" ] && export SHEPHERD_LOCK_STORE="$HOME/.config/shepherd_lock_ids.txt"
    [ -e "$SHEPHERD_LOCK_STORE" ] || touch "$SHEPHERD_LOCK_STORE"
    .shepherd_pools_list() {
        sheepctl pool -n "$SHEPHERD_LOCK_NAMESPACE" list -j | \
            jq -r '.[] | select(.available > 0) | .name' | sort
    }
    .shepherd_lock_list() {
        sort -t ':' -k 2,1 "$SHEPHERD_LOCK_STORE"
    }
    shepherd_current_lock() {
        [ -z "$SHEPHERD_LOCK_ID" ] && shepherd_lock_select
        echo "✅ Current lock $SHEPHERD_LOCK_ID for pool $SHEPHERD_POOL in namespace $SHEPHERD_LOCK_NAMESPACE"
    }
    shepherd_lock_select() {
        # shellcheck disable=SC2155
        local lock_entry="$(.shepherd_lock_list | fzf --height 10 --layout=reverse --prompt="Select a lock: ")"
        # shellcheck disable=SC2155
        export SHEPHERD_LOCK_ID="$(echo "$lock_entry" | cut -d ':' -f 1)"
        # shellcheck disable=SC2155
        export SHEPHERD_POOL="$(echo "$lock_entry" | cut -d ':' -f 2)"
        # shellcheck disable=SC2155
        export SHEPHERD_LOCK_NAMESPACE="$(echo "$lock_entry" | cut -d ':' -f 3)"
        echo "✅ Selected lock $SHEPHERD_LOCK_ID for pool $SHEPHERD_POOL in namespace $SHEPHERD_LOCK_NAMESPACE"
        echo "🚀 Use 'shepherd_lock' to create an environment to host a TKG management cluster"
        echo "⏳ Use 'shepherd_staus' to check the status of and environment"
    }
    shepherd_lock() {
        local pool lock_id
        pool=$(.shepherd_pools_list | fzf --height 10 --layout=reverse --prompt="Select a pool: ")
        lock_id=$(sheepctl pool lock "$SHEPHERD_POOL" -n "$SHEPHERD_LOCK_NAMESPACE" -t=false 2>&1 | grep 'with ID' | cut -d' ' -f9)
        export SHEPHERD_POOL="$pool"
        export SHEPHERD_LOCK_ID="$lock_id"
        echo "$SHEPHERD_LOCK_ID:$SHEPHERD_POOL:$SHEPHERD_LOCK_NAMESPACE" >> "$SHEPHERD_LOCK_STORE"
        echo "✅ Created lock $SHEPHERD_LOCK_ID for pool $SHEPHERD_POOL in namespace $SHEPHERD_LOCK_NAMESPACE"
        echo "🔋 Use 'shepherd_extend' to extend the lease of an environment"
        echo "🔐 Use 'shepherd_ssh' to ssh into an environment"
        echo "🔑 Use 'shepherd_kubeconfig' to get the kubeconfig of the TKG management cluster in an environment"
    }
	shepherd_status() {
        [ -z "$SHEPHERD_LOCK_ID" ] && shepherd_lock_select
	    sheepctl lock -n "$SHEPHERD_LOCK_NAMESPACE" get "$SHEPHERD_LOCK_ID"
    }
    shepherd_extend() {
        [ -z "$SHEPHERD_LOCK_ID" ] && shepherd_lock_select
        local duration="${1:-5d}"
	    sheepctl lock -n "$SHEPHERD_LOCK_NAMESPACE" extend "$SHEPHERD_LOCK_ID" -t "$duration"
        echo "✅ Extended lock $SHEPHERD_LOCK_ID for pool $SHEPHERD_POOL in namespace $SHEPHERD_LOCK_NAMESPACE for $duration"
    }
    shepherd_ssh() {
        [ -z "$SHEPHERD_LOCK_ID" ] && shepherd_lock_select
        sheepctl lock -n "$SHEPHERD_LOCK_NAMESPACE" ssh "$SHEPHERD_LOCK_ID"
    }
    shepherd_kubeconfig() {
        [ -z "$SHEPHERD_LOCK_ID" ] && shepherd_lock_select
        sheepctl lock -n "$SHEPHERD_LOCK_NAMESPACE" kubeconfig "$SHEPHERD_LOCK_ID"
    }
    shepherd_delete() {
        [ -z "$SHEPHERD_LOCK_ID" ] && shepherd_lock_select
        sheepctl lock -n "$SHEPHERD_LOCK_NAMESPACE" delete "$SHEPHERD_LOCK_ID"
        echo "✅ Deleted lock $SHEPHERD_LOCK_ID for pool $SHEPHERD_POOL in namespace $SHEPHERD_LOCK_NAMESPACE"
    }
}

# Functions

kubeconf() {
    # Merge all kubeconfig files in ~/.kube into KUBECONFIG
    # @ref https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/
    local confs=''
    for file in ~/.kube/*config*; do
        confs="${confs}$file:";
    done
    export KUBECONFIG="$confs"
    env | grep KUBECONFIG
}
kubeconf >/dev/null

vmw_whois() {
    # VMware specific whois
    local name="$*"
    #ref https://source.vmware.com/portal/search/people?q=alister&aq=(@cnbd%3D%22alister%22%20OR%20@ucnbd%3D%22alister%22)&client=InternalPeopleSearch&Tab=vmwarepeople&start=0&num=20&sid=1606940050&allPeople=true
    local url_base='https://source.vmware.com/portal/search/people?'
    local url_query_attributes="client=InternalPeopleSearch&Tab=vmwarepeople&start=0&num=20&sid=1606938064&allPeople=true"
    name="${name//+([[:space:]])/%20}"
    local url_query="q=${name}&aq=(@cnbd%3D%22${name}%22%20OR%20@ucnbd%3D%22${name}%22)"
    open "${url_base}${url_query}&${url_query_attributes}"
}